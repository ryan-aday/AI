# -*- coding: utf-8 -*-'
"""Sudoku_Basic.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jDqgKdAqWCM9GegLS8dmgrN7aT-YbHSk
"""

import csv, sys, time
results=[]
count=0

class sudo:
  def readCSV(filename):
    with open(filename) as csvfile:
      reader = csv.reader(csvfile) # change contents to floats
      
      for row in reader: # each row is a list
          for x in row:
            #print(x)
            if x=='_':
              row[row.index(x)]=0
            else:
              row[row.index(x)]=int(row[row.index(x)])            
          #print(row)
          results.append(row)
    #print(results)
    return results

  def writeCSV(filename):
    with open(filename, 'w', newline='') as f:
      writer = csv.writer(f)
      writer.writerows(results)
      return results

  def findNextCellToFill(grid, i, j):
          for x in range(i,9):
                  for y in range(j,9):
                          if grid[x][y] == 0:
                                  return x,y
          for x in range(0,9):
                  for y in range(0,9):
                          if grid[x][y] == 0:
                                  return x,y
          return -1,-1

  def isValid(grid, i, j, e):
          rowOk = all([e != grid[i][x] for x in range(9)])
          if rowOk:
                  columnOk = all([e != grid[x][j] for x in range(9)])
                  if columnOk:
                          # finding the top left x,y co-ordinates of the section containing the i,j cell
                          secTopX, secTopY = 3 *(i//3), 3 *(j//3) #floored quotient should be used here. 
                          for x in range(secTopX, secTopX+3):
                                  for y in range(secTopY, secTopY+3):
                                          if grid[x][y] == e:
                                                  return False
                          return True
          return False
  def solveSudoku(grid, i=0, j=0):
          global count
          i,j = sudo.findNextCellToFill(grid, i, j)
          if i == -1:
                  return True
          for e in range(1,10):
                  if sudo.isValid(grid,i,j,e):
                          grid[i][j] = e
                          if sudo.solveSudoku(grid, i, j):
                                  return True
                          # Undo the current cell for backtracking
                          grid[i][j] = 0
                  else:
                       count+=1 
          return False

  def heuristic():
    return count
  
  def process(i=sys.argv[1], o=sys.argv[2]):
    count=0
    sudo.readCSV(i)    
    #print(data)
    start = time.time()
    print(sudo.solveSudoku(results))
    #print(results)
    print( "solved in {} seconds".format( time.time() - start ) )
    print("{} backtracks taken".format(sudo.heuristic()))
    sudo.writeCSV(o)

if __name__ == '__main__':
    sudo.process(sys.argv[1], 'solved.csv') 
